// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createAnonUser = `-- name: CreateAnonUser :execresult
INSERT INTO anon_users (
  last_session, is_banned
) VALUES (
  ?, ?
)
ON CONFLICT(last_session)
DO UPDATE SET is_banned = excluded.is_banned
`

type CreateAnonUserParams struct {
	LastSession string
	IsBanned    int64
}

func (q *Queries) CreateAnonUser(ctx context.Context, arg CreateAnonUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAnonUser, arg.LastSession, arg.IsBanned)
}

const createReport = `-- name: CreateReport :execresult
INSERT INTO report_action (
  reporter_user_id,
  reporter_username,
  reporter_session,
  baduser_id,
  baduser_username,
  baduser_session,
  badmessage_transcript,
  badmessage_timestamp
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateReportParams struct {
	ReporterUserID       sql.NullInt64
	ReporterUsername     string
	ReporterSession      string
	BaduserID            sql.NullInt64
	BaduserUsername      string
	BaduserSession       string
	BadmessageTranscript string
	BadmessageTimestamp  int64
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createReport,
		arg.ReporterUserID,
		arg.ReporterUsername,
		arg.ReporterSession,
		arg.BaduserID,
		arg.BaduserUsername,
		arg.BaduserSession,
		arg.BadmessageTranscript,
		arg.BadmessageTimestamp,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  username, password, callsign, country, registration_session
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	Username            string
	Password            string
	Callsign            string
	Country             interface{}
	RegistrationSession string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Callsign,
		arg.Country,
		arg.RegistrationSession,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = ?
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getCallsign = `-- name: GetCallsign :one
SELECT callsign FROM users
WHERE callsign = ? LIMIT 1
`

func (q *Queries) GetCallsign(ctx context.Context, callsign string) (string, error) {
	row := q.db.QueryRowContext(ctx, getCallsign, callsign)
	err := row.Scan(&callsign)
	return callsign, err
}

const getLastBanEvents = `-- name: GetLastBanEvents :many
;

SELECT id, moderator_id, moderator_username, event_timestamp, baduser_id, baduser_username, baduser_session, moderator_notes, reason, is_ban_revert
FROM ban_action
ORDER BY event_timestamp DESC
LIMIT 100
`

// is_ban_revert
func (q *Queries) GetLastBanEvents(ctx context.Context) ([]BanAction, error) {
	rows, err := q.db.QueryContext(ctx, getLastBanEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BanAction
	for rows.Next() {
		var i BanAction
		if err := rows.Scan(
			&i.ID,
			&i.ModeratorID,
			&i.ModeratorUsername,
			&i.EventTimestamp,
			&i.BaduserID,
			&i.BaduserUsername,
			&i.BaduserSession,
			&i.ModeratorNotes,
			&i.Reason,
			&i.IsBanRevert,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastBanned = `-- name: GetLastBanned :many
SELECT id, username, password, callsign, country, settings, is_banned, is_verified, is_moderator, registration_session, registration_timestamp, last_online_timestamp
FROM users
WHERE is_banned == 1
AND username LIKE ?
LIMIT 100
`

func (q *Queries) GetLastBanned(ctx context.Context, username string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getLastBanned, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Callsign,
			&i.Country,
			&i.Settings,
			&i.IsBanned,
			&i.IsVerified,
			&i.IsModerator,
			&i.RegistrationSession,
			&i.RegistrationTimestamp,
			&i.LastOnlineTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastBannedAnon = `-- name: GetLastBannedAnon :many
SELECT id, last_session, is_banned
FROM anon_users
where is_banned == 1
AND last_session LIKE ?
LIMIT 100
`

func (q *Queries) GetLastBannedAnon(ctx context.Context, lastSession string) ([]AnonUser, error) {
	rows, err := q.db.QueryContext(ctx, getLastBannedAnon, lastSession)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnonUser
	for rows.Next() {
		var i AnonUser
		if err := rows.Scan(&i.ID, &i.LastSession, &i.IsBanned); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastReports = `-- name: GetLastReports :many
SELECT id, reporter_user_id, reporter_username, reporter_session, event_timestamp, baduser_id, baduser_username, baduser_session, reason, badmessage_transcript, badmessage_timestamp
FROM report_action
WHERE reporter_username LIKE ?
OR reporter_session LIKE ?
OR baduser_username LIKE ?
or baduser_SESSION LIKE ?
ORDER BY event_timestamp DESC
LIMIT 100
`

type GetLastReportsParams struct {
	ReporterUsername string
	ReporterSession  string
	BaduserUsername  string
	BaduserSession   string
}

func (q *Queries) GetLastReports(ctx context.Context, arg GetLastReportsParams) ([]ReportAction, error) {
	rows, err := q.db.QueryContext(ctx, getLastReports,
		arg.ReporterUsername,
		arg.ReporterSession,
		arg.BaduserUsername,
		arg.BaduserSession,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReportAction
	for rows.Next() {
		var i ReportAction
		if err := rows.Scan(
			&i.ID,
			&i.ReporterUserID,
			&i.ReporterUsername,
			&i.ReporterSession,
			&i.EventTimestamp,
			&i.BaduserID,
			&i.BaduserUsername,
			&i.BaduserSession,
			&i.Reason,
			&i.BadmessageTranscript,
			&i.BadmessageTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, callsign, country, settings, is_banned, is_verified, is_moderator, registration_session, registration_timestamp, last_online_timestamp FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Callsign,
		&i.Country,
		&i.Settings,
		&i.IsBanned,
		&i.IsVerified,
		&i.IsModerator,
		&i.RegistrationSession,
		&i.RegistrationTimestamp,
		&i.LastOnlineTimestamp,
	)
	return i, err
}

const getUserFromId = `-- name: GetUserFromId :one
SELECT id, username, password, callsign, country, settings, is_banned, is_verified, is_moderator, registration_session, registration_timestamp, last_online_timestamp FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserFromId(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Callsign,
		&i.Country,
		&i.Settings,
		&i.IsBanned,
		&i.IsVerified,
		&i.IsModerator,
		&i.RegistrationSession,
		&i.RegistrationTimestamp,
		&i.LastOnlineTimestamp,
	)
	return i, err
}

const isModerator = `-- name: IsModerator :one
SELECT is_moderator
FROM users
WHERE id == ?
LIMIT 1
`

func (q *Queries) IsModerator(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, isModerator, id)
	var is_moderator int64
	err := row.Scan(&is_moderator)
	return is_moderator, err
}

const listModerators = `-- name: ListModerators :many
SELECT id, username, password, callsign, country, settings, is_banned, is_verified, is_moderator, registration_session, registration_timestamp, last_online_timestamp FROM users
WHERE is_moderator == 1
`

func (q *Queries) ListModerators(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listModerators)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Callsign,
			&i.Country,
			&i.Settings,
			&i.IsBanned,
			&i.IsVerified,
			&i.IsModerator,
			&i.RegistrationSession,
			&i.RegistrationTimestamp,
			&i.LastOnlineTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordBanAction = `-- name: RecordBanAction :execresult
INSERT INTO ban_action (
  moderator_id,
  moderator_username,
  baduser_id,
  baduser_username,
  baduser_session,
  moderator_notes,
  reason,
  is_ban_revert
) SELECT
  ?,      -- moderator_id
  ?,      -- moderator_username
  ?,      -- baduser_id
  COALESCE((SELECT username FROM users WHERE users.id = ?), ''), -- baduser_id
  ?,      -- baduser_session
  ?,      -- moderator_notes
  ?,      -- reason
  ?
`

type RecordBanActionParams struct {
	ModeratorID       int64
	ModeratorUsername string
	BaduserID         sql.NullInt64
	ID                int64
	BaduserSession    string
	ModeratorNotes    interface{}
	Reason            interface{}
	IsBanRevert       int64
}

func (q *Queries) RecordBanAction(ctx context.Context, arg RecordBanActionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, recordBanAction,
		arg.ModeratorID,
		arg.ModeratorUsername,
		arg.BaduserID,
		arg.ID,
		arg.BaduserSession,
		arg.ModeratorNotes,
		arg.Reason,
		arg.IsBanRevert,
	)
}

const updateBanned = `-- name: UpdateBanned :execresult
UPDATE users SET is_banned = ? WHERE id = ?
`

type UpdateBannedParams struct {
	IsBanned int64
	ID       int64
}

func (q *Queries) UpdateBanned(ctx context.Context, arg UpdateBannedParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateBanned, arg.IsBanned, arg.ID)
}

const updateSettings = `-- name: UpdateSettings :execresult
UPDATE users SET settings = ? WHERE id = ?
`

type UpdateSettingsParams struct {
	Settings interface{}
	ID       int64
}

func (q *Queries) UpdateSettings(ctx context.Context, arg UpdateSettingsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateSettings, arg.Settings, arg.ID)
}
